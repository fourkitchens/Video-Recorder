<?php

/**
 * The time to wait before manipulating Brightcove API objects.
 *
 * Based on testing 5-6mins is adequate, this gives additional leeway.
 */
define('BRIGHTCOVE_RECORDER_API_WAIT', 60 * 10); // 10mins

/**
 * @file
 * Brightcove recorder module.
 */

module_load_include('inc', 'video_recorder');

/**
 * Implements hook_menu().
 */
function brightcove_recorder_menu() {
  $items = array();
  $items['brightcove_recorder/upload/%'] = array(
    'title' => 'Process recorded video',
    'description' => 'Copy recorded video from flash server to brightcove.',
    'page callback' => 'brightcove_recorder_upload',
    'page arguments' => array(2),
    'access arguments' => array('record video'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function brightcove_recorder_init() {
  drupal_add_js(drupal_get_path('module', 'brightcove_recorder') . '/brightcove_recorder.js');
}

/**
 * Implements hook_cron().
 */
function brightcove_recorder_cron() {
  $queued_before = time() - BRIGHTCOVE_RECORDER_API_WAIT;
  $result = db_query('SELECT * FROM {brightcove_recorder_queue} WHERE queued < %d', $queued_before);
  while ($row = db_fetch_array($result)) {
    brightcove_recorder_process_item($row);
  }
}

/**
 * Implements hook_form_alter().
 */
function brightcove_recorder_form_alter(&$form, &$form_state, $form_id) {

  if (!isset($form['#node']) || !isset($form['type']['#value']) 
    || $form_id != $form['type']['#value'] .'_node_form'
    || !user_access('record video')
    || empty($form['#field_info'])) {
    return;
  }

  foreach ($form['#field_info'] as $name => $field) {
    if ($field['type'] != 'brightcove_video') {
      continue;
    }

    if (!isset($form['#after_build'])) {
      $form['#after_build'] = array();
    }
 
    $form['#after_build'][] = 'brightcove_recorder_node_form_after_build';
    // we only call after_build once regardless of how many brightcove fields in form
    return;
  }
}

/**
 * Implements form after_build callback.
 */
function brightcove_recorder_node_form_after_build($form, &$form_state) {

  $record = t('Record');
  foreach ($form['#field_info'] as $name => $field) {
    if ($field['type'] != 'brightcove_video') {
      continue;
    }

    $count = $field['multiple'];
    if ($count <= 1) {
      ++$count;
    }

    for ($i = 0; $i < $count; ++$i) {
      $video_id = video_recorder_id_generate();

      $button = array(
        'record' => array(
          '#type' => 'brightcove_cck_browse_button',
          '#value' => $record,
          '#id' => "edit-field-bc-{$i}-record-{$video_id}",
          '#attributes' => array('class' => 'brightcove-recorder-record-button'),
          '#tree' => TRUE,
        ),
      );
      if (!empty($form[$name][$i]['actions'])) {
        array_splice($form[$name][$i]['actions'], 1, 0, $button);
      }
      else {
        $form[$name][$i]['actions'] = $button;
      }
      $form[$name][$i]['video_id']['#attributes']['class'] .= " brightcove-video-{$video_id}";

      $thumbnail = array(
        'thumbnail' => array(
          '#value' => '<span id="brightcove-recorder-thumbnail-' . $video_id . '" class="recorder-thumbail"></span>',
        ),
      );
      $form[$name][$i]['actions'][] = $thumbnail;
    }
  }
  return $form;
}

/**
 * Handles transfering video from flash server to brightcove.
 */
function brightcove_recorder_upload($video_id) {
  global $user;

  if(!video_recorder_id_verify($video_id)) {
    drupal_set_header('Status: 404 Not Found');
    return drupal_json(array('error' => 'Invalid video ID.'));
  }

  $video_url = video_recorder_playback_http_url($video_id);

  $video_stream = file_get_contents($video_url);
  if (FALSE === $video_stream) {
    drupal_set_header('Status: 500 Internal Server Error');
    return drupal_json(array('error' => 'Failed to download video from flash server.'));
  }

  // hack to create a secure temp file name with .flv exension
  $tmp_file = tempnam(file_directory_temp(), 'video-');
  unlink($tmp_file);
  $tmp_file .= '.flv';
  
  $bytes = file_put_contents($tmp_file, $video_stream);

  if (FALSE === $bytes) {
    @unlink($tmp_file); // we use @ in case permission prevent deleting the temp file
    drupal_set_header('Status: 500 Internal Server Error');
    return drupal_json(array('error' => 'Failed to write video local file.'));
  }

  $meta = array(
    'name' => $video_id,
    'shortDescription' => t('Uploaded video'),
  );

  module_load_include('module', 'brightcove');
  $id = brightcove_upload_video($tmp_file, $meta);
  unlink($tmp_file); // clean up after ourselves
  if (!$id) {
    drupal_set_header('Status: 500 Internal Server Error');
    return drupal_json(array('error' => 'Failed to upload video to brightcove.'));
  }

  // Work around for brightcove API lag for uploads
  $video = new StdClass();
  $video->id = $id;
  $video->name = $video_id;
  brightcove_video_cache_set($id, $video);

  brightcove_recorder_queue_action($id, 'thumb', $video_id);

  return drupal_json(array('brightcove_id' => $id));
}

/**
 * Add an item to the delayed processing queue.
 *
 * We do this to get around the limitations of the Brightcove API.
 */
function brightcove_recorder_queue_action($video_id, $action, $video_hash = '') {
  $args = (object) array(
    'brightcove_id' => $video_id,
    'action' => $action,
    'queued' => time());

  if ($video_hash) {
    $args->video_hash = $video_hash;
  }
  drupal_write_record('brightcove_recorder_queue', $args);
}

/**
 * Process a queued item.
 */
function brightcove_recorder_process_item($item) {
  switch ($item['action']) {
    case 'delete':
      if (!brightcove_recorder_delete_video($item['brightcove_id'])) {
        return FALSE;
      }
      break;

    case 'thumb':
      if (!brightcove_recorder_upload_thumb($item['brightcove_id'], $item['video_hash'])) {
        return FALSE;
      }
      video_recorder_thumbnail_delete($item['video_hash']);
      break;

  }
  db_query('DELETE FROM {brightcove_recorder_queue} WHERE qid = %s', $item['qid']);
}

/**
 * Deletes a video from the Brightcove CDN.
 */
function brightcove_recorder_delete_video($id) {
  module_load_include('module', 'brightcove');

  $bc = brightcove_initialize();

  try {
    $id = $bc->delete('video', $id);
  } catch (Exception $error) {
    $vars = array('@id' => $id, '@error' => (string)$error);
    watchdog('brightcove', 'Deleting video ID:@id from Brightcove failed. Error: @error', $vars, WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

/**
 * Uploads a thumbnail image for a video
 */
function brightcove_recorder_upload_thumb($id, $video_hash) {
  $thumb = $_SERVER['DOCUMENT_ROOT'] . base_path() . video_recorder_thumbnail_path($video_hash);
  $meta = array(
    'type' => 'THUMBNAIL',
  );

  try {
    $bc = brightcove_initialize();
    $id = $bc->createImage('video', $thumb, $meta, $id);
  } catch (Exception $error) {
    $vars = array('@thumb' => $thumb, '@id' => $id, '@error' => (string)$error);
    watchdog('brightcove', "Uploading thumbnail image '@thumb' to Brightcove for video ID:@id failed. Error: @error", $vars, WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}
