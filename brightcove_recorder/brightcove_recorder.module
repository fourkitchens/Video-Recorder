<?php

/**
 * Implements hook_menu().
 */
function brightcove_recorder_menu() {
  $items = array();
  $items['brightcove_recorder/upload/%'] = array(
    'title' => 'Process recorded video',
    'description' => 'Copy recorded video from flash server to brightcove.',
    'page callback' => 'brightcove_recorder_upload',
    'page arguments' => array(2),
    'access arguments' => array('record video'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function brightcove_recorder_init() {
  drupal_add_js(drupal_get_path('module', 'brightcove_recorder') . '/brightcove_recorder.js');
}

/**
 * Implements hook_form_alter().
 */
function brightcove_recorder_form_alter(&$form, &$form_state, $form_id) {

  if (!isset($form['#node']) || !isset($form['type']['#value']) 
    || $form_id != $form['type']['#value'] .'_node_form'
    || !user_access('record video')) {
    return;
  }

  foreach ($form['#field_info'] as $name => $field) {
    if ($field['type'] != 'brightcove_video') {
      continue;
    }

    if (!isset($form['#after_build'])) {
      $form['#after_build'] = array();
    }
 
    $form['#after_build'][] = 'brightcove_recorder_node_form_after_build';
    // we only call after_build once regardless of how many brightcove fields in form
    return;
  }
}

/**
 * Implements form after_build callback.
 */
function brightcove_recorder_node_form_after_build($form, &$form_state) {

  $record = t('Record');
  foreach ($form['#field_info'] as $name => $field) {
    if ($field['type'] != 'brightcove_video') {
      continue;
    }

    $count = $field['multiple'];
    if ($count <= 1) {
      ++$count;
    }

    for ($i = 0; $i < $count; ++$i) {
      $video_id = sha1(brightcove_recorder_random_bytes(128));
      $record_args = array(
        '#type' => 'button',
        '#value' => $record,
        '#id' => "edit-field-bc-{$i}-record-{$video_id}",
	'#attributes' => array('class' => 'brightcove-recorder-record-button'),
      );
      $button = array(array_merge($form[$name][$i]['actions']['browse'], $record_args));
      array_splice($form[$name][$i]['actions'], 1, 0, $button);
      $form[$name][$i]['video_id']['#attributes']['class'] .= " brightcove-video-{$video_id}";
    }
  }
  return $form;
}

/**
 * Returns a string of highly randomized bytes (over the full 8-bit range).
 *
 * This function is better than simply calling mt_rand() or any other built-in
 * PHP function because it can return a long string of bytes (compared to < 4
 * bytes normally from mt_rand()) and uses the best available pseudo-random source.
 *
 * Copied verbatim from drupal_random_bytes() from D7
 *  @link http://api.drupal.org/api/drupal/includes--bootstrap.inc/function/drupal_random_bytes/7
 *
 * @param $count
 *   The number of characters (bytes) to return in the string.
 */
function brightcove_recorder_random_bytes($count) {
  // $random_state does not use drupal_static as it stores random bytes.
  static $random_state, $bytes;
  // Initialize on the first call. The contents of $_SERVER includes a mix of
  // user-specific and system information that varies a little with each page.
  if (!isset($random_state)) {
    $random_state = print_r($_SERVER, TRUE);
    if (function_exists('getmypid')) {
      // Further initialize with the somewhat random PHP process ID.
      $random_state .= getmypid();
    }
    $bytes = '';
  }
  if (strlen($bytes) < $count) {
    // /dev/urandom is available on many *nix systems and is considered the
    // best commonly available pseudo-random source.
    if ($fh = @fopen('/dev/urandom', 'rb')) {
      // PHP only performs buffered reads, so in reality it will always read
      // at least 4096 bytes. Thus, it costs nothing extra to read and store
      // that much so as to speed any additional invocations.
      $bytes .= fread($fh, max(4096, $count));
      fclose($fh);
    }
    // If /dev/urandom is not available or returns no bytes, this loop will
    // generate a good set of pseudo-random bytes on any system.
    // Note that it may be important that our $random_state is passed
    // through hash() prior to being rolled into $output, that the two hash()
    // invocations are different, and that the extra input into the first one -
    // the microtime() - is prepended rather than appended. This is to avoid
    // directly leaking $random_state via the $output stream, which could
    // allow for trivial prediction of further "random" numbers.
    while (strlen($bytes) < $count) {
      $random_state = hash('sha256', microtime() . mt_rand() . $random_state);
      $bytes .= hash('sha256', mt_rand() . $random_state, TRUE);
    }
  }
  $output = substr($bytes, 0, $count);
  $bytes = substr($bytes, $count);
  return $output;
}

/**
 * Handles transfering video from flash server to brightcove.
 */
function brightcove_recorder_upload($video_id) {

  $video_url = video_recorder_playback_http_url($video_id);

  $video_stream = file_get_contents($video_url);
  if (FALSE === $video_stream) {
    drupal_set_header('Status: 500 Internal Server Error');
    return drupal_json(array('error' => 'Failed to download video from flash server.'));
  }

  // hack to create a secure temp file name.
  $tmp_file = tempnam(file_directory_temp(), 'video-');
  unlink($tmp_file);
  $tmp_file .= '.flv';
  
  $bytes = file_put_contents($tmp_file, $video_stream);

  if (FALSE === $bytes) {
    @unlink($tmp_file); // we use @ in case permission prevented writing the temp file
    drupal_set_header('Status: 500 Internal Server Error');
    return drupal_json(array('error' => 'Failed to write video local file.'));
  }

  module_load_include('brightcove', 'module');
  $meta = array(
    'name' => $video_id,
    'shortDescription' => t('Uploaded video'),
  );

  $id = brightcove_upload_video($tmp_file, $meta);
  unlink($tmp_file); // clean up after ourselves
  if (!$id) {
    drupal_set_header('Status: 500 Internal Server Error');
    return drupal_json(array('error' => 'Failed to upload video to brightcove.'));
  }

  // Work around for brightcove API lag for uploads
  $video = new StdClass();
  $video->id = $id;
  $video->name = $video_id;
  brightcove_video_cache_set($id, $video);

  return drupal_json(array('brightcove_id' => $id));
}
