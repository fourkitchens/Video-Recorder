<?php

/**
 * @file Video Recorder module.
 */

module_load_include('inc', 'video_recorder');

/**
 * Implements hook_menu().
 */
function video_recorder_menu() {
  $items = array();
  $items['admin/settings/video_recorder'] = array(
    'title' => 'Video recorder',
    'description' => 'Set basic recording settings for video recorder.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('video_recorder_admin'),
    'access arguments' => array('administer video recorder settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'video_recorder.admin.inc',
  );

  $items['video_recorder/record/%'] = array(
    'title' => 'Record Video',
    'description' => 'Record a video using flash.',
    'page callback' => 'video_recorder_recorder',
    'page arguments' => array(2),
    'access arguments' => array('record video'),
    'type' => MENU_CALLBACK,
  );

  $items['video_recorder/record/popup/%'] = array(
    'title' => 'Record Video Popup',
    'description' => 'Record a video using flash in a modal frame.',
    'page callback' => 'video_recorder_recorder_modal',
    'page arguments' => array(3),
    'access arguments' => array('record video'),
    'type' => MENU_CALLBACK,
  );

  $items['video_recorder/thumbnail/%'] = array(
    'title' => 'Store or retreieve Video Thumbnail',
    'description' => 'Depending on request type save or display video thumbnail image.',
    'page callback' => 'video_recorder_thumbnail',
    'page arguments' => array(2),
    'access arguments' => array('record video'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_perm().
 */
function video_recorder_perm() {
  return array('administer video recorder settings', 'record video');
}

/**
 * Records a video using flash.
 */
function video_recorder_recorder($video_id) {
  if (!video_recorder_id_verify($video_id)) {
    drupal_set_message(t('Invalid video ID.'), 'error');
    return t('ERROR!');
  }

  $base = drupal_get_path('module', 'video_recorder');
  drupal_add_js("{$base}/video_recorder.js");

  $options = video_recorder_defaults();
  return theme('video_recorder_recorder', $video_id, $options);
}

/**
 * Records a video using flash in a modal frame.
 */
function video_recorder_recorder_modal($video_id) {
  modalframe_child_js();
  return video_recorder_recorder($video_id);
}

/**
 * Implements hook_theme().
 */
function video_recorder_theme($existing, $type, $theme, $path) {
  return array(
    'video_recorder_recorder' => array(
      'arguments' => array(
        'video_id'  => NULL,
        'options'   => array(
          'id'          => NULL,
          'rtmp_url'    => NULL,
          'bandwidth'   => NULL,
          'compression' => NULL,
          'fps'         => NULL,
          'kfs'         => NULL,
          'length'      => NULL,
        ),
      ),
    ),
  );
}

/**
 * Themes the video recorder widget.
 *
 * @param $video_id
 *   The unique identifier for the video to be recorded.
 *
 * @param $options
 *   An array of parameters that get sent to the Flash recorder.
 *    id           - The id for the HTML element for the recorder.
 *    rtmp_url     - The target URL for streaming the video recording to.
 *    bandwidth    - The maximum amount of bandwidth an uploaded video will consume.
 *    compression  - The minimum compression quality an uploaded video must maintain.
 *    fps          - The number of frames per second an uploaded video will have.
 *    kfs          - The number of seconds in between each keyframe.
 *    length       - The maximum length of an uploaded video, measured in seconds.
 *
 * @return
 *   HTML ready for the browser
 */
function theme_video_recorder_recorder($video_id, $options=array()) {
  global $base_path;

  $video_id     = check_plain($video_id);
  $id           = check_plain($options['id']);
  $fps          = (int) $options['fps'];
  $kfs          = (int) $options['kfs'];
  $length       = (int) $options['length'];

  $flash_vars = http_build_query(array(
    'backText' => $options['back'],
    'bandwidth' => (int) $options['bandwidth'],
    'compression' => (int) $options['compression'],
    'fileName' => $video_id,
    'fps' => $fps,
    'height' => (int) $options['height'],
    // calculate number of frames between each keyframe based on current FPS
    'keyframe' => $fps * $kfs,
    'maxLength' => (int) $options['length'],
    'playText' => check_plain($options['play']),
    'recording' => check_plain($options['recording']),
    'recordTooltipText' => check_plain($options['record_tooltip']),
    'recText' => check_plain($options['rec']),
    'reviewTooltipText' => check_plain($options['review_tooltip']),
    'settingsText' => check_plain($options['settings']),
    'server' => check_plain($options['rtmp_url']),
    'stop' => check_plain($options['stop']),
    'thumbnailSaveURL' => check_plain($options['thumbnail_save_url']),
    'timeLeftText' => check_plain($options['time_left']),
    'volumeText' => check_plain($options['volume']),
    'width' => (int) $options['width'],
  ));

  $recorder = $base_path . drupal_get_path('module', 'video_recorder') . '/recorder.swf';

  $save = t('Save');

  $content = <<<HTML
    <div id="{$id}-wrapper" class="video-recorder-wrapper">
      <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="{$id}" class="video-recorder" width="640" height="480"
        codebase="http://fpdownload.macromedia.com/get/flashplayer/current/swflash.cab">
        <param name="movie" value="{$recorder}" />
        <param name="quality" value="high" />
        <param name="bgcolor" value="#ffffff" />
        <param name="allowScriptAccess" value="sameDomain" />
        <param name="FlashVars" value="{$flash_vars}" />
        <embed src="{$recorder}" quality="high" bgcolor="#ffffff" width="640" height="480" name="recorder" align="middle" 
          play="true" loop="false" quality="high" allowScriptAccess="sameDomain" type="application/x-shockwave-flash" 
          pluginspage="http://www.adobe.com/go/getflashplayer" 
          FlashVars="{$flash_vars}">
        </embed>
      </object>
    </div>

    <div id="{$id}-save-wrapper" class="video-recorder-save-wrapper ahah-progress">
      <a href="#" id="{$id}-save-{$video_id}" class="video-recorder-save" rel="{$id}">{$save}</a>
      <span style="display:none;" class="throbber"></span>
    </div>
HTML;

  return $content;
}

/**
 * Prepares the default configuration options for the record object.
 */
function video_recorder_defaults() {
  $options = array(
    'id' => 'video-recorder',
    'back' => t('Back'),
    'bandwidth' => variable_get('video_recorder_camera_bandwidth', VIDEO_RECORDER_DEFAULT_CAMERA_BANDWIDTH),
    'compression' => variable_get('video_recorder_camera_compression', VIDEO_RECORDER_DEFAULT_CAMERA_COMPRESSION),
    'fps' => variable_get('video_recorder_camera_fps', VIDEO_RECORDER_DEFAULT_CAMERA_FPS),
    'height' => VIDEO_RECORDER_DEFAULT_HEIGHT,
    'kfs' => variable_get('video_recorder_camera_keyframe', VIDEO_RECORDER_DEFAULT_CAMERA_KEYFRAME),
    'length' => variable_get('video_recorder_camera_length', VIDEO_RECORDER_DEFAULT_CAMERA_LENGTH),
    'play' => t('Review'),
    'rec' => t('Rec'),
    'recording' => t('Recording ...'),
    'record_tooltip' => t('Start / stop recording'),
    'review_tooltip' => t('Review recording'),
    'rtmp_url' => variable_get('video_recorder_rtmp_url', VIDEO_RECORDER_DEFAULT_RTMP_URL),
    'settings' => t('Settings'),
    'stop' => t('Stop'),
    'time_left' => t('Time Left:'),
    'thumbnail_save_url' => url('video_recorder/thumbnail/'),
    'volume' => t('Volume'),
    'width' => VIDEO_RECORDER_DEFAULT_WIDTH,
  );

  return $options;
}

/**
 * Provides a RESTful interface for handling video thumbnail images.
 */
function video_recorder_thumbnail($video_id) {
  if (!video_recorder_id_verify($video_id)) {
    return;
  }

  switch ($_SERVER['REQUEST_METHOD']) {
    default:
      return drupal_goto(video_recorder_thumbnail_url($video_id));
      break;

    case 'POST':
      $image = file_get_contents("php://input");
      $result = video_recorder_thumbnail_save($video_id, $image);
      drupal_json(array('result' => $result));
  }
}
